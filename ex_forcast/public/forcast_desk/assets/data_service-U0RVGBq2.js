var n=(e,a,t)=>new Promise((s,r)=>{var d=o=>{try{c(t.next(o))}catch(p){r(p)}},l=o=>{try{c(t.throw(o))}catch(p){r(p)}},c=o=>o.done?s(o.value):Promise.resolve(o.value).then(d,l);c((t=t.apply(e,a)).next())});import{q as i}from"./index-DSYnFDpC.js";function f(){return n(this,null,function*(){try{return(yield(yield fetch("/api/v2/method/ex_forcast.api.year.get_year_options")).json()).data.options.filter(s=>s)}catch(e){return console.error("Error loading year options:",e),[]}})}function j(){return n(this,null,function*(){try{const e=i.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const s=(yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.estimate_display?project=${encodeURIComponent(e.project_name)}`)).json()).data||{};return Object.keys(s).length>0?s:{status:"no_data",message:`No expense data found for project: ${e.project_name}`,project:e.project_name}}catch(e){return console.error("Error loading expense data:",e),{status:"error",message:"Failed to load expense data"}}})}function _(){return n(this,null,function*(){try{const e=i.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const t=yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.get_all_expense_assumptions?project=${encodeURIComponent(e.project_name)}`)).json();return t.data&&t.data.expenses?{status:"success",expenses:t.data.expenses,categories:t.data.categories||[]}:{status:"no_data",message:`No expense assumptions found for project: ${e.project_name}`,project:e.project_name,expenses:[],categories:[]}}catch(e){return console.error("Error loading all expenses and categories:",e),{status:"error",message:"Failed to load expense assumptions",expenses:[],categories:[]}}})}function x(e){const a=new Set;for(const t in e)for(const s in e[t])e[t][s].forEach(r=>a.add(r.expense));return[...a].sort()}export{_ as a,j as b,x as e,f as l};
