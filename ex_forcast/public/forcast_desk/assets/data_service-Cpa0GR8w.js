var p=(e,s,t)=>new Promise((a,c)=>{var r=n=>{try{l(t.next(n))}catch(i){c(i)}},o=n=>{try{l(t.throw(n))}catch(i){c(i)}},l=n=>n.done?a(n.value):Promise.resolve(n.value).then(r,o);l((t=t.apply(e,s)).next())});import{q as u,E as d}from"./index-ZSaFeStz.js";function _(){return p(this,null,function*(){try{return(yield(yield fetch("/api/v2/method/ex_forcast.api.year.get_year_options",{headers:{"X-Frappe-CSRF-Token":d()}})).json()).data.options.filter(a=>a)}catch(e){return console.error("Error loading year options:",e),[]}})}function j(){return p(this,null,function*(){try{const e=u.value;if(!e)return console.warn("❌ [EXPENSE DATA] No project selected"),{status:"no_project_selected",message:"No project selected"};const s=d(),t=`/api/v2/method/ex_forcast.api.expense_estimate.estimate_display?project=${encodeURIComponent(e.project_name)}`,r=(yield(yield fetch(t,{headers:{"X-Frappe-CSRF-Token":s}})).json()).data||{};return Object.keys(r).length>0?r:{status:"no_data",message:`No expense data found for project: ${e.project_name}`,project:e.project_name}}catch(e){return console.error("Error loading expense data:",e),{status:"error",message:"Failed to load expense data"}}})}function x(){return p(this,null,function*(){try{const e=u.value;if(!e)return console.warn("❌ [DEFAULT EXPENSES] No project selected"),{status:"no_project_selected",message:"No project selected"};const s=e.project_name||e.name,t=d(),a=`/api/v2/method/ex_forcast.api.default_expenses.get_default_expenses_for_project?project_name=${encodeURIComponent(s)}`,r=yield(yield fetch(a,{headers:{"X-Frappe-CSRF-Token":t}})).json(),o=r.data||r;return o.success?{status:"success",defaultExpenses:o.default_expenses||[],selectedDepartments:o.selected_departments||[],message:o.message}:{status:"error",message:o.error||"Failed to load default expenses",defaultExpenses:[],selectedDepartments:[]}}catch(e){return console.error("Error loading default expenses:",e),{status:"error",message:"Failed to load default expenses",defaultExpenses:[],selectedDepartments:[]}}})}function g(){return p(this,null,function*(){try{const e=u.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const t=yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.get_all_expense_assumptions?project=${encodeURIComponent(e.project_name)}`,{headers:{"X-Frappe-CSRF-Token":d()}})).json();return t.data&&t.data.expenses?{status:"success",expenses:t.data.expenses,categories:t.data.categories||[]}:{status:"no_data",message:`No expense assumptions found for project: ${e.project_name}`,project:e.project_name,expenses:[],categories:[]}}catch(e){return console.error("Error loading all expenses and categories:",e),{status:"error",message:"Failed to load expense assumptions",expenses:[],categories:[]}}})}function h(e){const s=new Set;for(const t in e)for(const a in e[t])e[t][a].forEach(c=>s.add(c.expense));return[...s].sort()}export{x as a,j as b,_ as c,h as e,g as l};
