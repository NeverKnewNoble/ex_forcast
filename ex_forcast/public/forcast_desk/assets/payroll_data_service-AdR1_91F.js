var x=Object.defineProperty,B=Object.defineProperties;var U=Object.getOwnPropertyDescriptors;var L=Object.getOwnPropertySymbols;var K=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable;var k=(n,e,t)=>e in n?x(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,_=(n,e)=>{for(var t in e||(e={}))K.call(e,t)&&k(n,t,e[t]);if(L)for(var t of L(e))X.call(e,t)&&k(n,t,e[t]);return n},F=(n,e)=>B(n,U(e));var p=(n,e,t)=>new Promise((a,o)=>{var r=c=>{try{s(t.next(c))}catch(d){o(d)}},l=c=>{try{s(t.throw(c))}catch(d){o(d)}},s=c=>c.done?a(c.value):Promise.resolve(c.value).then(r,l);s((t=t.apply(n,e)).next())});import{c as u}from"./SettingsModal-D-D5AQet.js";import{h as y,k as Y,E as f}from"./index-DFp4WPHj.js";import"./advanced_settings-BeZtrwoj.js";const H=["ROOMS","FOOD & BEVERAGE","OTHER OPERATING DEPARTMENTS","ADMINISTRATION & GENERAL","INFORMATION & TELECOMMUNICATION SYSTEMS","SALES & MARKETING","POM"],J={department:"",departmentLocation:"",position:"",designation:"",salary:0,count:0,category:""};class W{constructor(){this.validationRules={required:["department","departmentLocation","position","designation"],numeric:["salary","count"],minValues:{salary:0,count:0}}}transformApiToFrontend(e,t,a=null,o=null){try{if(!e||!e.message)throw new Error("Invalid API response structure");const r={},l=[];return Object.keys(e.message).forEach(s=>{if(a&&o){const c=parseInt(s),d=parseInt(a),i=parseInt(o);if(c<d||c>i)return}e.message[s].forEach(c=>{const d=this.transformPayrollItem(c,s);d&&(l.push(d),r[s]||(r[s]={}),r[s][d.id]||(r[s][d.id]={}),r[s][d.id]={unique_id:c.unique_id,count:c.monthly_count&&Object.keys(c.monthly_count).length>0?c.monthly_count:{}})})}),{payrollData:r,payrollRows:l,projectName:t,totalRows:l.length}}catch(r){throw console.error("Error transforming API to frontend:",r),new Error(`Failed to transform API data: ${r.message}`)}}transformFrontendToApi(e,t,a){try{if(!a)throw new Error("Project name is required");const o=[];return e.forEach(r=>{const l=this.transformRowToApiFormat(r,t);l&&o.push(l)}),{changes:o,project:a}}catch(o){throw console.error("Error transforming frontend to API:",o),new Error(`Failed to transform frontend data: ${o.message}`)}}transformPayrollItem(e,t){try{let a;return e.unique_id?a=e.unique_id:a=`${e.department}_${e.department_location}_${e.position}_${e.designation}_${t}`,{id:a,department:e.department||"",departmentLocation:e.department_location||"",position:e.position||"",designation:e.designation||"",salary:parseFloat(e.salary)||0,count:parseInt(e.amount)||0,category:e.department||"",year:t,unique_id:e.unique_id}}catch(a){return console.error("Error transforming payroll item:",a,e),null}}transformRowToApiFormat(e,t){try{const a={department:e.department,department_location:e.departmentLocation,position:e.position,designation:e.designation,salary:parseFloat(e.salary)||0,amount:parseInt(e.count)||0};if(e.unique_id&&(a.unique_id=e.unique_id),e.year&&(a.year=e.year),t&&t[e.year]&&t[e.year][e.id]){const o=t[e.year][e.id];o.count&&Object.keys(o.count).length>0&&(a.monthly_count=o.count)}return a}catch(a){return console.error("Error transforming row to API format:",a,e),null}}validatePayrollData(e,t="frontend"){const a=[],o=[];try{return t==="frontend"?this.validateFrontendData(e,a,o):this.validateApiData(e,a,o)}catch(r){return a.push(`Validation error: ${r.message}`),{isValid:!1,errors:a,warnings:o}}}validateFrontendData(e,t,a){return!e.payrollRows||!Array.isArray(e.payrollRows)?(t.push("Payroll rows must be an array"),{isValid:!1,errors:t,warnings:a}):(e.payrollRows.forEach((o,r)=>{this.validationRules.required.forEach(l=>{(!o[l]||o[l].toString().trim()==="")&&t.push(`Row ${r+1}: ${l} is required`)}),this.validationRules.numeric.forEach(l=>{const s=parseFloat(o[l]);(isNaN(s)||s<this.validationRules.minValues[l])&&t.push(`Row ${r+1}: ${l} must be a positive number`)}),o.department&&!H.includes(o.department)&&a.push(`Row ${r+1}: Department "${o.department}" is not in standard categories`)}),{isValid:t.length===0,errors:t,warnings:a})}validateApiData(e,t,a){return e.message?(Object.keys(e.message).forEach(o=>{if(!Array.isArray(e.message[o])){t.push(`Year ${o}: Data must be an array`);return}e.message[o].forEach((r,l)=>{(!r.department||!r.department_location||!r.position||!r.designation)&&t.push(`Year ${o}, Row ${l+1}: Missing required fields`),(isNaN(parseFloat(r.salary))||isNaN(parseInt(r.amount)))&&t.push(`Year ${o}, Row ${l+1}: Invalid numeric values`)})}),{isValid:t.length===0,errors:t,warnings:a}):(t.push("API response must contain message property"),{isValid:!1,errors:t,warnings:a})}createDefaultRow(){return F(_({},J),{id:this.generateRowId()})}createDefaultRelatedRow(e,t=null){const a={id:this.generateRowId(),pageType:e,year:new Date().getFullYear().toString()};t&&(a.payroll_reference={id:t.id,unique_id:t.unique_id,department:t.department,departmentLocation:t.departmentLocation,position:t.position,designation:t.designation});const o=this.getPageTypeDefaults(e);return _(_({},a),o)}getPageTypeDefaults(e){return{bonus:{bonus_amount:0,bonus_type:"annual",bonus_percentage:0},overtime:{overtime_hours:0,overtime_rate:0,overtime_type:"monthly"},benefits:{benefit_type:"health",benefit_amount:0,benefit_percentage:0}}[e]||{}}generateRowId(){return`payroll_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}findMatchingPayrollRow(e,t){if(e.payroll_id){const a=t.find(o=>o.unique_id===e.payroll_id);if(a)return a}return t.find(a=>a.department===(e.department||e.department_location)&&a.departmentLocation===(e.departmentLocation||e.department_location)&&a.position===e.position&&a.designation===e.designation)}mergeApiChanges(e,t){try{const a=_({},e);return t.forEach(o=>{const r=o.year||new Date().getFullYear().toString(),l=o.unique_id||this.generateRowId();a[r]||(a[r]={}),a[r][l]={salary:parseFloat(o.salary)||0,unique_id:o.unique_id,count:o.monthly_count||{},salary:{}}}),a}catch(a){throw console.error("Error merging API changes:",a),new Error(`Failed to merge API changes: ${a.message}`)}}extractChanges(e,t){const a=[];try{return Object.keys(e).forEach(o=>{Object.keys(e[o]).forEach(r=>{var c;const l=e[o][r],s=(c=t[o])==null?void 0:c[r];(!s||JSON.stringify(l)!==JSON.stringify(s))&&a.push({year:o,rowId:r,data:l,type:s?"update":"create"})})}),a}catch(o){throw console.error("Error extracting changes:",o),new Error(`Failed to extract changes: ${o.message}`)}}}const O=new W,Q=(n,e,t,a)=>O.transformApiToFrontend(n,e,t,a),z=(n,e,t)=>O.transformFrontendToApi(n,e,t),D=(n,e)=>O.validatePayrollData(n,e),M=y(!1),j=y(!1),I=y(""),h=Y({year:"",month:"",rows:[]}),S=y([]),R=y([]),A=y([]),T=y([]);function $(n){return p(this,null,function*(){const e=new Set,t=new Set;(n||[]).forEach(r=>{r&&typeof r=="object"&&(r.departmentLocation&&String(r.departmentLocation).trim()&&e.add(String(r.departmentLocation).trim()),r.designation&&String(r.designation).trim()&&t.add(String(r.designation).trim()))});try{yield C()}catch(r){}try{yield P()}catch(r){}const a=new Set((R.value||[]).map(r=>(r.label||r.value||"").toString().trim().toLowerCase())),o=new Set((A.value||[]).map(r=>(r.label||r.value||"").toString().trim().toLowerCase()));for(const r of e){const l=r.toString().trim().toLowerCase();if(!a.has(l))try{yield ee(r),a.add(l)}catch(s){}}for(const r of t){const l=r.toString().trim().toLowerCase();if(!o.has(l))try{yield ae(r),o.add(l)}catch(s){}}})}const q=y({}),E=y([]);//! ************ Department Options ****************
function G(){return p(this,null,function*(){var n;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list",{headers:{"X-Frappe-CSRF-Token":f()}})).json();t.message&&t.message.success?S.value=t.message.departments.map(a=>({value:a.department_name,label:a.department_name})):(console.error("Failed to load departments:",((n=t.message)==null?void 0:n.error)||"Unknown error"),S.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}])}catch(e){console.error("Error loading departments:",e),S.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}]}})}//! ************ Project Department Options (Filtered) ****************
function se(){return p(this,null,function*(){var n;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list",{headers:{"X-Frappe-CSRF-Token":f()}})).json();return t.message&&t.message.success?t.message.departments.filter(o=>{const r=o.department_name;return!(r.toLowerCase().includes("all")||r.toLowerCase().includes("group"))}).map(o=>({value:o.department_name,label:o.department_name})):(console.error("Failed to load departments:",((n=t.message)==null?void 0:n.error)||"Unknown error"),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}])}catch(e){return console.error("Error loading project departments:",e),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}]}})}//! ************ Department Location Options ****************
function C(){return p(this,null,function*(){var n;try{const t=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.get_payroll_department_location_list",{headers:{"X-Frappe-CSRF-Token":f()}})).json();t.message&&t.message.success?R.value=t.message.locations.map(a=>({value:a.name,label:a.department_location||a.name})):(console.error("Failed to load department locations:",((n=t.message)==null?void 0:n.error)||"Unknown error"),R.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}])}catch(e){console.error("Error loading department locations:",e),R.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}]}})}//! ************ Designation Options ****************
function P(){return p(this,null,function*(){var n;try{const t=yield(yield fetch("/api/method/ex_forcast.api.designation_list.get_designation_list",{headers:{"X-Frappe-CSRF-Token":f()}})).json();t.message&&t.message.success?A.value=t.message.designations.map(a=>({value:a.name,label:a.designation_name||a.name})):(console.error("Failed to load designations:",((n=t.message)==null?void 0:n.error)||"Unknown error"),A.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}])}catch(e){console.error("Error loading designations:",e),A.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}]}})}//! ************ Fetch payroll data from API ****************
function le(n,e=null,t=null){return p(this,null,function*(){var a;try{if(!n){console.warn("No project name provided for payroll data fetch");return}const r=yield(yield fetch(`/api/method/ex_forcast.api.call_and_save_payroll_data.payroll_data_display?project=${encodeURIComponent(n)}`,{headers:{"X-Frappe-CSRF-Token":f()}})).json();if(r.message&&!r.message.error){const l=Q(r,n,e,t),s=D(l,"frontend");if(!s.isValid&&(console.warn("Payroll data validation warnings:",s.warnings),s.errors.length>0)){console.error("Payroll data validation errors:",s.errors),u.error("Payroll data contains validation errors");return}q.value=l.payrollData,E.value=l.payrollRows;try{const c=f(),d=`/api/v2/method/ex_forcast.api.default_payroll.get_default_payroll_for_project?project_name=${encodeURIComponent(n)}`,g=yield(yield fetch(d,{headers:{"X-Frappe-CSRF-Token":c}})).json(),m=g.data||g;m&&m.success?T.value=m.default_payroll||[]:(console.warn("❌ [DEFAULT PAYROLL] API returned error or no success:",m),T.value=[])}catch(c){console.error("❌ [DEFAULT PAYROLL] Error loading default payroll:",c),T.value=[]}}else console.error("Failed to load payroll data:",(a=r.message)==null?void 0:a.error),u.error("Failed to load payroll data")}catch(o){console.error("Error loading payroll data:",o),u.error("Error loading payroll data")}})}//! ************ Save payroll changes to API ****************
function ie(n,e){return p(this,null,function*(){var t;try{if(!e)throw new Error("Project name is required");if(!n||n.length===0)return{status:"success",message:"No changes to save"};const a={};n.forEach(i=>{a[i.rowId]||(a[i.rowId]={changes:[],monthly_count:{},baseCountChanged:!1}),a[i.rowId].changes.push(i),i.fieldType==="count"&&(i.month&&i.isOverride?a[i.rowId].monthly_count[i.month]=i.newValue:i.month||(a[i.rowId].baseCountChanged=!0,a[i.rowId].baseCount=i.newValue))});const o=Object.keys(a).map(i=>E.value.find(g=>g.id===i)).filter(Boolean);yield $(o);const r=Object.keys(a).map(i=>{const g=E.value.find(v=>v.id===i);if(!g)throw console.error("Row not found. Available rows:",E.value.map(v=>({id:v.id,unique_id:v.unique_id,department:v.department,position:v.position}))),new Error(`Row with ID ${i} not found. Available rows: ${E.value.length}`);const m=a[i],w=m.changes[m.changes.length-1],V=F(_({},g),{salary:w.fieldType==="salary"?w.newValue:g.salary,count:m.baseCountChanged?m.baseCount:g.count}),b=O.transformRowToApiFormat(V,q.value);return!b.year&&w&&w.year&&(b.year=w.year),Object.keys(m.monthly_count).length>0&&(b.monthly_count=m.monthly_count),b}),l={payrollRows:r.map(i=>({department:i.department,departmentLocation:i.department_location,position:i.position,designation:i.designation,salary:i.salary,count:i.amount})),projectName:e},s=D(l,"frontend");if(!s.isValid&&(console.warn("Payroll changes validation warnings:",s.warnings),s.errors.length>0))throw new Error(`Validation failed: ${s.errors.join(", ")}`);//! ************ Save payroll changes to API ****************
const d=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":f()},body:JSON.stringify({changes:r,project:e})})).json();if(d.message&&d.message.success)return{status:"success",message:"Changes saved successfully"};throw new Error(((t=d.message)==null?void 0:t.error)||"Failed to save changes")}catch(a){throw console.error("Error saving payroll changes:",a),a}})}//! ************ Modal functions ****************
function ce(){M.value=!0,N(),I.value="",S.value.length===0&&G(),R.value.length===0&&C(),A.value.length===0&&P()}function de(){M.value=!1,N()}function N(){h.year="",h.rows=[],Z()}function Z(){const n=O.createDefaultRow();h.rows.push(n)}function ue(n){h.rows.length>1&&h.rows.splice(n,1)}//! ************ Submit payroll data to API ****************
function pe(n,e,t){return p(this,null,function*(){var l;if(!n){u.error("Please select a project first");return}if(!h.year||h.rows.length===0){u.error("Please select year and add at least one payroll entry.");return}const a=h.rows.filter(s=>s.department&&s.departmentLocation&&s.position&&s.designation&&s.salary>0&&s.count>0);if(a.length===0){u.error("Please fill in all required fields with valid values.");return}const o={payrollRows:a,projectName:n.project_name},r=D(o,"frontend");if(!r.isValid){u.error(`Validation failed: ${r.errors.join(", ")}`);return}j.value=!0,I.value="";try{yield $(a);const s=z(a,{},n.project_name);s.changes.forEach(i=>{i.year=h.year});//! ************ Submit payroll data to API ****************
const d=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":f()},body:JSON.stringify(s)})).json();if(d.message&&d.message.success)u.success("Payroll data added successfully!"),M.value=!1,N(),t&&(yield t());else throw new Error(((l=d.message)==null?void 0:l.error)||"Failed to add payroll data")}catch(s){I.value="Failed to add payroll data. Please try again.",console.error("Error adding payroll data:",s)}finally{j.value=!1}})}//! ************ Create new items ****************
function me(n){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.department_list.create_department",{method:"POST",headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":f()},body:JSON.stringify({department_name:n})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield G(),a.message.department;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department")}catch(t){throw u.error(t.message||"Failed to create department"),t}})}//! ************ Create new department location ****************
function ee(n){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.create_payroll_department_location",{method:"POST",headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":f()},body:JSON.stringify({department_location:n})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield C(),a.message.location;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department location")}catch(t){throw u.error(t.message||"Failed to create department location"),t}})}//! ************ Create new designation ****************
function ae(n){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.designation_list.create_designation",{method:"POST",headers:{"Content-Type":"application/json","X-Frappe-CSRF-Token":f()},body:JSON.stringify({designation_name:n})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield P(),a.message.designation;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create designation")}catch(t){throw u.error(t.message||"Failed to create designation"),t}})}export{W as P,C as a,q as b,de as c,T as d,h as e,le as f,R as g,A as h,I as i,Z as j,j as k,se as l,ie as m,me as n,ce as o,E as p,ee as q,ue as r,M as s,ae as t,pe as u};
