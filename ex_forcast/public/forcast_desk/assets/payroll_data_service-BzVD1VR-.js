var V=Object.defineProperty,x=Object.defineProperties;var U=Object.getOwnPropertyDescriptors;var C=Object.getOwnPropertySymbols;var B=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable;var L=(r,e,t)=>e in r?V(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,v=(r,e)=>{for(var t in e||(e={}))B.call(e,t)&&L(r,t,e[t]);if(C)for(var t of C(e))K.call(e,t)&&L(r,t,e[t]);return r},S=(r,e)=>x(r,U(e));var p=(r,e,t)=>new Promise((a,n)=>{var o=c=>{try{s(t.next(c))}catch(d){n(d)}},l=c=>{try{s(t.throw(c))}catch(d){n(d)}},s=c=>c.done?a(c.value):Promise.resolve(c.value).then(o,l);s((t=t.apply(r,e)).next())});import{c as u}from"./SettingsModal-1hy0bolw.js";import"./advanced_settings-CxjuzcaQ.js";import{h as f,k as H}from"./index-BbtVxGeo.js";const Y=["ROOMS","FOOD & BEVERAGE","OTHER OPERATING DEPARTMENTS","ADMINISTRATION & GENERAL","INFORMATION & TELECOMMUNICATION SYSTEMS","SALES & MARKETING","POM"],J={department:"",departmentLocation:"",position:"",designation:"",salary:0,count:0,category:""};class W{constructor(){this.validationRules={required:["department","departmentLocation","position","designation"],numeric:["salary","count"],minValues:{salary:0,count:0}}}transformApiToFrontend(e,t,a=null,n=null){try{if(!e||!e.message)throw new Error("Invalid API response structure");const o={},l=[];return Object.keys(e.message).forEach(s=>{if(a&&n){const c=parseInt(s),d=parseInt(a),i=parseInt(n);if(c<d||c>i)return}e.message[s].forEach(c=>{const d=this.transformPayrollItem(c,s);d&&(l.push(d),o[s]||(o[s]={}),o[s][d.id]||(o[s][d.id]={}),o[s][d.id]={salary:c.salary||0,unique_id:c.unique_id,count:c.monthly_count&&Object.keys(c.monthly_count).length>0?c.monthly_count:{},salary:{}})})}),{payrollData:o,payrollRows:l,projectName:t,totalRows:l.length}}catch(o){throw console.error("Error transforming API to frontend:",o),new Error(`Failed to transform API data: ${o.message}`)}}transformFrontendToApi(e,t,a){try{if(!a)throw new Error("Project name is required");const n=[];return e.forEach(o=>{const l=this.transformRowToApiFormat(o,t);l&&n.push(l)}),{changes:n,project:a}}catch(n){throw console.error("Error transforming frontend to API:",n),new Error(`Failed to transform frontend data: ${n.message}`)}}transformPayrollItem(e,t){try{let a;return e.unique_id?a=e.unique_id:a=`${e.department}_${e.department_location}_${e.position}_${e.designation}_${t}`,{id:a,department:e.department||"",departmentLocation:e.department_location||"",position:e.position||"",designation:e.designation||"",salary:parseFloat(e.salary)||0,count:parseInt(e.amount)||0,category:e.department||"",year:t,unique_id:e.unique_id}}catch(a){return console.error("Error transforming payroll item:",a,e),null}}transformRowToApiFormat(e,t){try{const a={department:e.department,department_location:e.departmentLocation,position:e.position,designation:e.designation,salary:parseFloat(e.salary)||0,amount:parseInt(e.count)||0};if(e.unique_id&&(a.unique_id=e.unique_id),e.year&&(a.year=e.year),t&&t[e.year]&&t[e.year][e.id]){const n=t[e.year][e.id];n.count&&Object.keys(n.count).length>0&&(a.monthly_count=n.count)}return a}catch(a){return console.error("Error transforming row to API format:",a,e),null}}validatePayrollData(e,t="frontend"){const a=[],n=[];try{return t==="frontend"?this.validateFrontendData(e,a,n):this.validateApiData(e,a,n)}catch(o){return a.push(`Validation error: ${o.message}`),{isValid:!1,errors:a,warnings:n}}}validateFrontendData(e,t,a){return!e.payrollRows||!Array.isArray(e.payrollRows)?(t.push("Payroll rows must be an array"),{isValid:!1,errors:t,warnings:a}):(e.payrollRows.forEach((n,o)=>{this.validationRules.required.forEach(l=>{(!n[l]||n[l].toString().trim()==="")&&t.push(`Row ${o+1}: ${l} is required`)}),this.validationRules.numeric.forEach(l=>{const s=parseFloat(n[l]);(isNaN(s)||s<this.validationRules.minValues[l])&&t.push(`Row ${o+1}: ${l} must be a positive number`)}),n.department&&!Y.includes(n.department)&&a.push(`Row ${o+1}: Department "${n.department}" is not in standard categories`)}),{isValid:t.length===0,errors:t,warnings:a})}validateApiData(e,t,a){return e.message?(Object.keys(e.message).forEach(n=>{if(!Array.isArray(e.message[n])){t.push(`Year ${n}: Data must be an array`);return}e.message[n].forEach((o,l)=>{(!o.department||!o.department_location||!o.position||!o.designation)&&t.push(`Year ${n}, Row ${l+1}: Missing required fields`),(isNaN(parseFloat(o.salary))||isNaN(parseInt(o.amount)))&&t.push(`Year ${n}, Row ${l+1}: Invalid numeric values`)})}),{isValid:t.length===0,errors:t,warnings:a}):(t.push("API response must contain message property"),{isValid:!1,errors:t,warnings:a})}createDefaultRow(){return S(v({},J),{id:this.generateRowId()})}createDefaultRelatedRow(e,t=null){const a={id:this.generateRowId(),pageType:e,year:new Date().getFullYear().toString()};t&&(a.payroll_reference={id:t.id,unique_id:t.unique_id,department:t.department,departmentLocation:t.departmentLocation,position:t.position,designation:t.designation});const n=this.getPageTypeDefaults(e);return v(v({},a),n)}getPageTypeDefaults(e){return{bonus:{bonus_amount:0,bonus_type:"annual",bonus_percentage:0},overtime:{overtime_hours:0,overtime_rate:0,overtime_type:"monthly"},benefits:{benefit_type:"health",benefit_amount:0,benefit_percentage:0}}[e]||{}}generateRowId(){return`payroll_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}findMatchingPayrollRow(e,t){if(e.payroll_id){const a=t.find(n=>n.unique_id===e.payroll_id);if(a)return a}return t.find(a=>a.department===(e.department||e.department_location)&&a.departmentLocation===(e.departmentLocation||e.department_location)&&a.position===e.position&&a.designation===e.designation)}mergeApiChanges(e,t){try{const a=v({},e);return t.forEach(n=>{const o=n.year||new Date().getFullYear().toString(),l=n.unique_id||this.generateRowId();a[o]||(a[o]={}),a[o][l]={salary:parseFloat(n.salary)||0,unique_id:n.unique_id,count:n.monthly_count||{},salary:{}}}),a}catch(a){throw console.error("Error merging API changes:",a),new Error(`Failed to merge API changes: ${a.message}`)}}extractChanges(e,t){const a=[];try{return Object.keys(e).forEach(n=>{Object.keys(e[n]).forEach(o=>{var c;const l=e[n][o],s=(c=t[n])==null?void 0:c[o];(!s||JSON.stringify(l)!==JSON.stringify(s))&&a.push({year:n,rowId:o,data:l,type:s?"update":"create"})})}),a}catch(n){throw console.error("Error extracting changes:",n),new Error(`Failed to extract changes: ${n.message}`)}}}const O=new W,Q=(r,e,t,a)=>O.transformApiToFrontend(r,e,t,a),z=(r,e,t)=>O.transformFrontendToApi(r,e,t),T=(r,e)=>O.validatePayrollData(r,e),M=f(!1),j=f(!1),D=f(""),m=H({year:"",month:"",rows:[]}),R=f([]),E=f([]),b=f([]),I=f([]);function k(r){return p(this,null,function*(){const e=new Set,t=new Set;(r||[]).forEach(o=>{o&&typeof o=="object"&&(o.departmentLocation&&String(o.departmentLocation).trim()&&e.add(String(o.departmentLocation).trim()),o.designation&&String(o.designation).trim()&&t.add(String(o.designation).trim()))});try{yield F()}catch(o){}try{yield N()}catch(o){}const a=new Set((E.value||[]).map(o=>(o.label||o.value||"").toString().trim().toLowerCase())),n=new Set((b.value||[]).map(o=>(o.label||o.value||"").toString().trim().toLowerCase()));for(const o of e){const l=o.toString().trim().toLowerCase();if(!a.has(l))try{yield Z(o),a.add(l)}catch(s){}}for(const o of t){const l=o.toString().trim().toLowerCase();if(!n.has(l))try{yield ee(o),n.add(l)}catch(s){}}})}const $=f({}),w=f([]);//! ************ Department Options ****************
function q(){return p(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list")).json();t.message&&t.message.success?R.value=t.message.departments.map(a=>({value:a.department_name,label:a.department_name})):(console.error("Failed to load departments:",((r=t.message)==null?void 0:r.error)||"Unknown error"),R.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}],console.log("Using fallback department options"))}catch(e){console.error("Error loading departments:",e),R.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}],console.log("Using fallback department options due to error")}})}//! ************ Project Department Options (Filtered) ****************
function re(){return p(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list")).json();return t.message&&t.message.success?t.message.departments.filter(n=>{const o=n.department_name;return!(o.toLowerCase().includes("all")||o.toLowerCase().includes("group"))}).map(n=>({value:n.department_name,label:n.department_name})):(console.error("Failed to load departments:",((r=t.message)==null?void 0:r.error)||"Unknown error"),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}])}catch(e){return console.error("Error loading project departments:",e),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}]}})}//! ************ Department Location Options ****************
function F(){return p(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.get_payroll_department_location_list")).json();t.message&&t.message.success?E.value=t.message.locations.map(a=>({value:a.name,label:a.department_location||a.name})):(console.error("Failed to load department locations:",((r=t.message)==null?void 0:r.error)||"Unknown error"),E.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}],console.log("Using fallback department location options"))}catch(e){console.error("Error loading department locations:",e),E.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}],console.log("Using fallback department location options due to error")}})}//! ************ Designation Options ****************
function N(){return p(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.designation_list.get_designation_list")).json();t.message&&t.message.success?b.value=t.message.designations.map(a=>({value:a.name,label:a.designation_name||a.name})):(console.error("Failed to load designations:",((r=t.message)==null?void 0:r.error)||"Unknown error"),b.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}],console.log("Using fallback designation options"))}catch(e){console.error("Error loading designations:",e),b.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}],console.log("Using fallback designation options due to error")}})}//! ************ Fetch payroll data from API ****************
function se(r,e=null,t=null){return p(this,null,function*(){var a;try{if(!r){console.warn("No project name provided for payroll data fetch");return}const o=yield(yield fetch(`/api/method/ex_forcast.api.call_and_save_payroll_data.payroll_data_display?project=${encodeURIComponent(r)}`)).json();if(o.message&&!o.message.error){const l=Q(o,r,e,t),s=T(l,"frontend");if(!s.isValid&&(console.warn("Payroll data validation warnings:",s.warnings),s.errors.length>0)){console.error("Payroll data validation errors:",s.errors),u.error("Payroll data contains validation errors");return}$.value=l.payrollData,w.value=l.payrollRows;try{const d=yield(yield fetch(`/api/v2/method/ex_forcast.api.default_payroll.get_default_payroll_for_project?project_name=${encodeURIComponent(r)}`)).json(),i=d.data||d;i&&i.success?I.value=i.default_payroll||[]:I.value=[]}catch(c){I.value=[]}}else console.error("Failed to load payroll data:",(a=o.message)==null?void 0:a.error),u.error("Failed to load payroll data")}catch(n){console.error("Error loading payroll data:",n),u.error("Error loading payroll data")}})}//! ************ Save payroll changes to API ****************
function le(r,e){return p(this,null,function*(){var t;try{if(!e)throw new Error("Project name is required");if(!r||r.length===0)return{status:"success",message:"No changes to save"};const a={};r.forEach(i=>{a[i.rowId]||(a[i.rowId]={changes:[],monthly_count:{},baseCountChanged:!1}),a[i.rowId].changes.push(i),i.fieldType==="count"&&(i.month&&i.isOverride?a[i.rowId].monthly_count[i.month]=i.newValue:i.month||(a[i.rowId].baseCountChanged=!0,a[i.rowId].baseCount=i.newValue))});const n=Object.keys(a).map(i=>w.value.find(g=>g.id===i)).filter(Boolean);yield k(n);const o=Object.keys(a).map(i=>{const g=w.value.find(y=>y.id===i);if(!g)throw console.error("Row not found. Available rows:",w.value.map(y=>({id:y.id,unique_id:y.unique_id,department:y.department,position:y.position}))),new Error(`Row with ID ${i} not found. Available rows: ${w.value.length}`);const h=a[i],_=h.changes[h.changes.length-1],G=S(v({},g),{salary:_.fieldType==="salary"?_.newValue:g.salary,count:h.baseCountChanged?h.baseCount:g.count}),A=O.transformRowToApiFormat(G,$.value);return!A.year&&_&&_.year&&(A.year=_.year),Object.keys(h.monthly_count).length>0&&(A.monthly_count=h.monthly_count),A}),l={payrollRows:o.map(i=>({department:i.department,departmentLocation:i.department_location,position:i.position,designation:i.designation,salary:i.salary,count:i.amount})),projectName:e},s=T(l,"frontend");if(!s.isValid&&(console.warn("Payroll changes validation warnings:",s.warnings),s.errors.length>0))throw new Error(`Validation failed: ${s.errors.join(", ")}`);//! ************ Save payroll changes to API ****************
const d=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({changes:o,project:e})})).json();if(d.message&&d.message.success)return{status:"success",message:"Changes saved successfully"};throw new Error(((t=d.message)==null?void 0:t.error)||"Failed to save changes")}catch(a){throw console.error("Error saving payroll changes:",a),a}})}//! ************ Modal functions ****************
function ie(){M.value=!0,P(),D.value="",R.value.length===0&&q(),E.value.length===0&&F(),b.value.length===0&&N()}function ce(){M.value=!1,P()}function P(){m.year="",m.rows=[],X()}function X(){const r=O.createDefaultRow();m.rows.push(r)}function de(r){m.rows.length>1&&m.rows.splice(r,1)}//! ************ Submit payroll data to API ****************
function ue(r,e,t){return p(this,null,function*(){var l;if(!r){u.error("Please select a project first");return}if(!m.year||m.rows.length===0){u.error("Please select year and add at least one payroll entry.");return}const a=m.rows.filter(s=>s.department&&s.departmentLocation&&s.position&&s.designation&&s.salary>0&&s.count>0);if(a.length===0){u.error("Please fill in all required fields with valid values.");return}const n={payrollRows:a,projectName:r.project_name},o=T(n,"frontend");if(!o.isValid){u.error(`Validation failed: ${o.errors.join(", ")}`);return}j.value=!0,D.value="";try{yield k(a);const s=z(a,{},r.project_name);s.changes.forEach(i=>{i.year=m.year});//! ************ Submit payroll data to API ****************
const d=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json();if(d.message&&d.message.success)u.success("Payroll data added successfully!"),M.value=!1,P(),t&&(yield t());else throw new Error(((l=d.message)==null?void 0:l.error)||"Failed to add payroll data")}catch(s){D.value="Failed to add payroll data. Please try again.",console.error("Error adding payroll data:",s)}finally{j.value=!1}})}//! ************ Create new items ****************
function pe(r){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.department_list.create_department",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({department_name:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield q(),a.message.department;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department")}catch(t){throw u.error(t.message||"Failed to create department"),t}})}//! ************ Create new department location ****************
function Z(r){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.create_payroll_department_location",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({department_location:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield F(),a.message.location;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department location")}catch(t){throw u.error(t.message||"Failed to create department location"),t}})}//! ************ Create new designation ****************
function ee(r){return p(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.designation_list.create_designation",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({designation_name:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield N(),a.message.designation;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create designation")}catch(t){throw u.error(t.message||"Failed to create designation"),t}})}export{W as P,F as a,$ as b,ce as c,I as d,m as e,se as f,E as g,b as h,D as i,X as j,j as k,re as l,ue as m,pe as n,ie as o,w as p,Z as q,de as r,M as s,ee as t,le as u};
