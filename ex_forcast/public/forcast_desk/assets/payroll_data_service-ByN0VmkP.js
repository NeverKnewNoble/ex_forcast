var $=Object.defineProperty,q=Object.defineProperties;var G=Object.getOwnPropertyDescriptors;var M=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var F=(r,e,t)=>e in r?$(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,y=(r,e)=>{for(var t in e||(e={}))V.call(e,t)&&F(r,t,e[t]);if(M)for(var t of M(e))x.call(e,t)&&F(r,t,e[t]);return r},O=(r,e)=>q(r,G(e));var d=(r,e,t)=>new Promise((a,o)=>{var n=c=>{try{l(t.next(c))}catch(s){o(s)}},i=c=>{try{l(t.throw(c))}catch(s){o(s)}},l=c=>c.done?a(c.value):Promise.resolve(c.value).then(n,i);l((t=t.apply(r,e)).next())});import{c as u}from"./alertService-y5V6STep.js";import"./advanced_settings-hmArpyU9.js";import{h as f,k as U}from"./index-DSYnFDpC.js";const B=["ROOMS","FOOD & BEVERAGE","OTHER OPERATING DEPARTMENTS","ADMINISTRATION & GENERAL","INFORMATION & TELECOMMUNICATION SYSTEMS","SALES & MARKETING","POM"],K={department:"",departmentLocation:"",position:"",designation:"",salary:0,count:0,category:""};class H{constructor(){this.validationRules={required:["department","departmentLocation","position","designation"],numeric:["salary","count"],minValues:{salary:0,count:0}}}transformApiToFrontend(e,t,a=null,o=null){try{if(!e||!e.message)throw new Error("Invalid API response structure");const n={},i=[];return Object.keys(e.message).forEach(l=>{if(a&&o){const c=parseInt(l),s=parseInt(a),m=parseInt(o);if(c<s||c>m)return}e.message[l].forEach(c=>{const s=this.transformPayrollItem(c,l);s&&(i.push(s),n[l]||(n[l]={}),n[l][s.id]||(n[l][s.id]={}),n[l][s.id]={salary:c.salary||0,unique_id:c.unique_id,count:c.monthly_count&&Object.keys(c.monthly_count).length>0?c.monthly_count:{},salary:{}})})}),{payrollData:n,payrollRows:i,projectName:t,totalRows:i.length}}catch(n){throw console.error("Error transforming API to frontend:",n),new Error(`Failed to transform API data: ${n.message}`)}}transformFrontendToApi(e,t,a){try{if(!a)throw new Error("Project name is required");const o=[];return e.forEach(n=>{const i=this.transformRowToApiFormat(n,t);i&&o.push(i)}),{changes:o,project:a}}catch(o){throw console.error("Error transforming frontend to API:",o),new Error(`Failed to transform frontend data: ${o.message}`)}}transformPayrollItem(e,t){try{let a;return e.unique_id?a=e.unique_id:a=`${e.department}_${e.department_location}_${e.position}_${e.designation}_${t}`,{id:a,department:e.department||"",departmentLocation:e.department_location||"",position:e.position||"",designation:e.designation||"",salary:parseFloat(e.salary)||0,count:parseInt(e.amount)||0,category:e.department||"",year:t,unique_id:e.unique_id}}catch(a){return console.error("Error transforming payroll item:",a,e),null}}transformRowToApiFormat(e,t){try{const a={department:e.department,department_location:e.departmentLocation,position:e.position,designation:e.designation,salary:parseFloat(e.salary)||0,amount:parseInt(e.count)||0};if(e.unique_id&&(a.unique_id=e.unique_id),e.year&&(a.year=e.year),t&&t[e.year]&&t[e.year][e.id]){const o=t[e.year][e.id];o.count&&Object.keys(o.count).length>0&&(a.monthly_count=o.count)}return a}catch(a){return console.error("Error transforming row to API format:",a,e),null}}validatePayrollData(e,t="frontend"){const a=[],o=[];try{return t==="frontend"?this.validateFrontendData(e,a,o):this.validateApiData(e,a,o)}catch(n){return a.push(`Validation error: ${n.message}`),{isValid:!1,errors:a,warnings:o}}}validateFrontendData(e,t,a){return!e.payrollRows||!Array.isArray(e.payrollRows)?(t.push("Payroll rows must be an array"),{isValid:!1,errors:t,warnings:a}):(e.payrollRows.forEach((o,n)=>{this.validationRules.required.forEach(i=>{(!o[i]||o[i].toString().trim()==="")&&t.push(`Row ${n+1}: ${i} is required`)}),this.validationRules.numeric.forEach(i=>{const l=parseFloat(o[i]);(isNaN(l)||l<this.validationRules.minValues[i])&&t.push(`Row ${n+1}: ${i} must be a positive number`)}),o.department&&!B.includes(o.department)&&a.push(`Row ${n+1}: Department "${o.department}" is not in standard categories`)}),{isValid:t.length===0,errors:t,warnings:a})}validateApiData(e,t,a){return e.message?(Object.keys(e.message).forEach(o=>{if(!Array.isArray(e.message[o])){t.push(`Year ${o}: Data must be an array`);return}e.message[o].forEach((n,i)=>{(!n.department||!n.department_location||!n.position||!n.designation)&&t.push(`Year ${o}, Row ${i+1}: Missing required fields`),(isNaN(parseFloat(n.salary))||isNaN(parseInt(n.amount)))&&t.push(`Year ${o}, Row ${i+1}: Invalid numeric values`)})}),{isValid:t.length===0,errors:t,warnings:a}):(t.push("API response must contain message property"),{isValid:!1,errors:t,warnings:a})}createDefaultRow(){return O(y({},K),{id:this.generateRowId()})}createDefaultRelatedRow(e,t=null){const a={id:this.generateRowId(),pageType:e,year:new Date().getFullYear().toString()};t&&(a.payroll_reference={id:t.id,unique_id:t.unique_id,department:t.department,departmentLocation:t.departmentLocation,position:t.position,designation:t.designation});const o=this.getPageTypeDefaults(e);return y(y({},a),o)}getPageTypeDefaults(e){return{bonus:{bonus_amount:0,bonus_type:"annual",bonus_percentage:0},overtime:{overtime_hours:0,overtime_rate:0,overtime_type:"monthly"},benefits:{benefit_type:"health",benefit_amount:0,benefit_percentage:0}}[e]||{}}generateRowId(){return`payroll_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}findMatchingPayrollRow(e,t){if(e.payroll_id){const a=t.find(o=>o.unique_id===e.payroll_id);if(a)return a}return t.find(a=>a.department===(e.department||e.department_location)&&a.departmentLocation===(e.departmentLocation||e.department_location)&&a.position===e.position&&a.designation===e.designation)}mergeApiChanges(e,t){try{const a=y({},e);return t.forEach(o=>{const n=o.year||new Date().getFullYear().toString(),i=o.unique_id||this.generateRowId();a[n]||(a[n]={}),a[n][i]={salary:parseFloat(o.salary)||0,unique_id:o.unique_id,count:o.monthly_count||{},salary:{}}}),a}catch(a){throw console.error("Error merging API changes:",a),new Error(`Failed to merge API changes: ${a.message}`)}}extractChanges(e,t){const a=[];try{return Object.keys(e).forEach(o=>{Object.keys(e[o]).forEach(n=>{var c;const i=e[o][n],l=(c=t[o])==null?void 0:c[n];(!l||JSON.stringify(i)!==JSON.stringify(l))&&a.push({year:o,rowId:n,data:i,type:l?"update":"create"})})}),a}catch(o){throw console.error("Error extracting changes:",o),new Error(`Failed to extract changes: ${o.message}`)}}}const v=new H,Y=(r,e,t,a)=>v.transformApiToFrontend(r,e,t,a),J=(r,e,t)=>v.transformFrontendToApi(r,e,t),R=(r,e)=>v.validatePayrollData(r,e),S=f(!1),N=f(!1),A=f(""),p=U({year:"",month:"",rows:[]}),_=f([]),E=f([]),b=f([]),P=f({}),w=f([]);//! ************ Department Options ****************
function C(){return d(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list")).json();t.message&&t.message.success?_.value=t.message.departments.map(a=>({value:a.department_name,label:a.department_name})):(console.error("Failed to load departments:",((r=t.message)==null?void 0:r.error)||"Unknown error"),_.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}],console.log("Using fallback department options"))}catch(e){console.error("Error loading departments:",e),_.value=[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}],console.log("Using fallback department options due to error")}})}//! ************ Project Department Options (Filtered) ****************
function ee(){return d(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.department_list.get_department_list")).json();return t.message&&t.message.success?t.message.departments.filter(o=>{const n=o.department_name;return!(n.toLowerCase().includes("all")||n.toLowerCase().includes("group"))}).map(o=>({value:o.department_name,label:o.department_name})):(console.error("Failed to load departments:",((r=t.message)==null?void 0:r.error)||"Unknown error"),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"BANQUET",label:"BANQUET"},{value:"OOD",label:"OOD"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}])}catch(e){return console.error("Error loading project departments:",e),[{value:"ROOMS",label:"ROOMS"},{value:"FOOD & BEVERAGE",label:"FOOD & BEVERAGE"},{value:"SALES & MARKETING",label:"SALES & MARKETING"},{value:"ADMINISTRATION",label:"ADMINISTRATION"}]}})}//! ************ Department Location Options ****************
function k(){return d(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.get_payroll_department_location_list")).json();t.message&&t.message.success?E.value=t.message.locations.map(a=>({value:a.name,label:a.department_location||a.name})):(console.error("Failed to load department locations:",((r=t.message)==null?void 0:r.error)||"Unknown error"),E.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}],console.log("Using fallback department location options"))}catch(e){console.error("Error loading department locations:",e),E.value=[{value:"Front Desk",label:"Front Desk"},{value:"Housekeeping",label:"Housekeeping"},{value:"Restaurant",label:"Restaurant"},{value:"Kitchen",label:"Kitchen"},{value:"Sales Office",label:"Sales Office"},{value:"Administration",label:"Administration"}],console.log("Using fallback department location options due to error")}})}//! ************ Designation Options ****************
function j(){return d(this,null,function*(){var r;try{const t=yield(yield fetch("/api/method/ex_forcast.api.designation_list.get_designation_list")).json();t.message&&t.message.success?b.value=t.message.designations.map(a=>({value:a.name,label:a.designation_name||a.name})):(console.error("Failed to load designations:",((r=t.message)==null?void 0:r.error)||"Unknown error"),b.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}],console.log("Using fallback designation options"))}catch(e){console.error("Error loading designations:",e),b.value=[{value:"Front Office Manager",label:"Front Office Manager"},{value:"Receptionist",label:"Receptionist"},{value:"Housekeeping Manager",label:"Housekeeping Manager"},{value:"Room Attendant",label:"Room Attendant"},{value:"Restaurant Manager",label:"Restaurant Manager"},{value:"Waiter",label:"Waiter"},{value:"Executive Chef",label:"Executive Chef"},{value:"Sous Chef",label:"Sous Chef"},{value:"Sales Manager",label:"Sales Manager"},{value:"Sales Executive",label:"Sales Executive"},{value:"General Manager",label:"General Manager"},{value:"Accountant",label:"Accountant"}],console.log("Using fallback designation options due to error")}})}//! ************ Fetch payroll data from API ****************
function ae(r,e=null,t=null){return d(this,null,function*(){var a;try{if(!r){console.warn("No project name provided for payroll data fetch");return}const n=yield(yield fetch(`/api/method/ex_forcast.api.call_and_save_payroll_data.payroll_data_display?project=${encodeURIComponent(r)}`)).json();if(n.message&&!n.message.error){const i=Y(n,r,e,t),l=R(i,"frontend");if(!l.isValid&&(console.warn("Payroll data validation warnings:",l.warnings),l.errors.length>0)){console.error("Payroll data validation errors:",l.errors),u.error("Payroll data contains validation errors");return}P.value=i.payrollData,w.value=i.payrollRows}else console.error("Failed to load payroll data:",(a=n.message)==null?void 0:a.error),u.error("Failed to load payroll data")}catch(o){console.error("Error loading payroll data:",o),u.error("Error loading payroll data")}})}//! ************ Save payroll changes to API ****************
function te(r,e){return d(this,null,function*(){var t;try{if(!e)throw new Error("Project name is required");if(!r||r.length===0)return{status:"success",message:"No changes to save"};const a={};r.forEach(s=>{a[s.rowId]||(a[s.rowId]={changes:[],monthly_count:{},baseCountChanged:!1}),a[s.rowId].changes.push(s),s.fieldType==="count"&&(s.month&&s.isOverride?a[s.rowId].monthly_count[s.month]=s.newValue:s.month||(a[s.rowId].baseCountChanged=!0,a[s.rowId].baseCount=s.newValue))});const o=Object.keys(a).map(s=>{const m=w.value.find(h=>h.id===s);if(!m)throw console.error("Row not found. Available rows:",w.value.map(h=>({id:h.id,unique_id:h.unique_id,department:h.department,position:h.position}))),new Error(`Row with ID ${s} not found. Available rows: ${w.value.length}`);const g=a[s],T=g.changes[g.changes.length-1],L=O(y({},m),{salary:T.fieldType==="salary"?T.newValue:m.salary,count:g.baseCountChanged?g.baseCount:m.count}),D=v.transformRowToApiFormat(L,P.value);return Object.keys(g.monthly_count).length>0&&(D.monthly_count=g.monthly_count),D}),n={payrollRows:o.map(s=>({department:s.department,departmentLocation:s.department_location,position:s.position,designation:s.designation,salary:s.salary,count:s.amount})),projectName:e},i=R(n,"frontend");if(!i.isValid&&(console.warn("Payroll changes validation warnings:",i.warnings),i.errors.length>0))throw new Error(`Validation failed: ${i.errors.join(", ")}`);//! ************ Save payroll changes to API ****************
const c=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({changes:o,project:e})})).json();if(c.message&&c.message.success)return{status:"success",message:"Changes saved successfully"};throw new Error(((t=c.message)==null?void 0:t.error)||"Failed to save changes")}catch(a){throw console.error("Error saving payroll changes:",a),a}})}//! ************ Modal functions ****************
function oe(){S.value=!0,I(),A.value="",_.value.length===0&&C(),E.value.length===0&&k(),b.value.length===0&&j()}function re(){S.value=!1,I()}function I(){p.year="",p.rows=[],W()}function W(){const r=v.createDefaultRow();p.rows.push(r)}function ne(r){p.rows.length>1&&p.rows.splice(r,1)}//! ************ Submit payroll data to API ****************
function se(r,e,t){return d(this,null,function*(){var i;if(!r){u.error("Please select a project first");return}if(!p.year||p.rows.length===0){u.error("Please select year and add at least one payroll entry.");return}const a=p.rows.filter(l=>l.department&&l.departmentLocation&&l.position&&l.designation&&l.salary>0&&l.count>0);if(a.length===0){u.error("Please fill in all required fields with valid values.");return}const o={payrollRows:a,projectName:r.project_name},n=R(o,"frontend");if(!n.isValid){u.error(`Validation failed: ${n.errors.join(", ")}`);return}N.value=!0,A.value="";try{const l=J(a,{},r.project_name);l.changes.forEach(m=>{m.year=p.year});//! ************ Submit payroll data to API ****************
const s=yield(yield fetch("/api/method/ex_forcast.api.call_and_save_payroll_data.upsert_payroll_data_items",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(l)})).json();if(s.message&&s.message.success)u.success("Payroll data added successfully!"),S.value=!1,I(),t&&(yield t());else throw new Error(((i=s.message)==null?void 0:i.error)||"Failed to add payroll data")}catch(l){A.value="Failed to add payroll data. Please try again.",console.error("Error adding payroll data:",l)}finally{N.value=!1}})}//! ************ Create new items ****************
function le(r){return d(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.department_list.create_department",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({department_name:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield C(),a.message.department;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department")}catch(t){throw u.error(t.message||"Failed to create department"),t}})}//! ************ Create new department location ****************
function ie(r){return d(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.payroll_department_location_list.create_payroll_department_location",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({department_location:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield k(),a.message.location;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create department location")}catch(t){throw u.error(t.message||"Failed to create department location"),t}})}//! ************ Create new designation ****************
function ce(r){return d(this,null,function*(){var e;try{const a=yield(yield fetch("/api/method/ex_forcast.api.designation_list.create_designation",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({designation_name:r})})).json();if(a.message&&a.message.success)return u.success(a.message.message),yield j(),a.message.designation;throw new Error(((e=a.message)==null?void 0:e.error)||"Failed to create designation")}catch(t){throw u.error(t.message||"Failed to create designation"),t}})}export{H as P,P as a,p as b,re as c,_ as d,E as e,ae as f,b as g,A as h,W as i,N as j,se as k,ee as l,le as m,ie as n,oe as o,w as p,ce as q,ne as r,S as s,te as t};
