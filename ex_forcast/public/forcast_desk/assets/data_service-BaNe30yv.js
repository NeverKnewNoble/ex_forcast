var n=(e,o,t)=>new Promise((s,a)=>{var l=r=>{try{c(t.next(r))}catch(p){a(p)}},i=r=>{try{c(t.throw(r))}catch(p){a(p)}},c=r=>r.done?s(r.value):Promise.resolve(r.value).then(l,i);c((t=t.apply(e,o)).next())});import{q as d}from"./index-BbtVxGeo.js";function m(){return n(this,null,function*(){try{return(yield(yield fetch("/api/v2/method/ex_forcast.api.year.get_year_options")).json()).data.options.filter(s=>s)}catch(e){return console.error("Error loading year options:",e),[]}})}function _(){return n(this,null,function*(){try{const e=d.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const s=(yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.estimate_display?project=${encodeURIComponent(e.project_name)}`)).json()).data||{};return Object.keys(s).length>0?s:{status:"no_data",message:`No expense data found for project: ${e.project_name}`,project:e.project_name}}catch(e){return console.error("Error loading expense data:",e),{status:"error",message:"Failed to load expense data"}}})}function x(){return n(this,null,function*(){try{const e=d.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const o=e.project_name||e.name,s=yield(yield fetch(`/api/v2/method/ex_forcast.api.default_expenses.get_default_expenses_for_project?project_name=${encodeURIComponent(o)}`)).json(),a=s.data||s;return a.success?{status:"success",defaultExpenses:a.default_expenses||[],selectedDepartments:a.selected_departments||[],message:a.message}:{status:"error",message:a.error||"Failed to load default expenses",defaultExpenses:[],selectedDepartments:[]}}catch(e){return console.error("Error loading default expenses:",e),{status:"error",message:"Failed to load default expenses",defaultExpenses:[],selectedDepartments:[]}}})}function j(){return n(this,null,function*(){try{const e=d.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const t=yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.get_all_expense_assumptions?project=${encodeURIComponent(e.project_name)}`)).json();return t.data&&t.data.expenses?{status:"success",expenses:t.data.expenses,categories:t.data.categories||[]}:{status:"no_data",message:`No expense assumptions found for project: ${e.project_name}`,project:e.project_name,expenses:[],categories:[]}}catch(e){return console.error("Error loading all expenses and categories:",e),{status:"error",message:"Failed to load expense assumptions",expenses:[],categories:[]}}})}function g(e){const o=new Set;for(const t in e)for(const s in e[t])e[t][s].forEach(a=>o.add(a.expense));return[...o].sort()}export{j as a,x as b,_ as c,g as e,m as l};
