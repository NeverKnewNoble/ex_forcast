var w=Object.defineProperty;var y=Object.getOwnPropertySymbols;var _=Object.prototype.hasOwnProperty,v=Object.prototype.propertyIsEnumerable;var h=(e,o,t)=>o in e?w(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,l=(e,o)=>{for(var t in o||(o={}))_.call(o,t)&&h(e,t,o[t]);if(y)for(var t of y(o))v.call(o,t)&&h(e,t,o[t]);return e};var m=(e,o,t)=>new Promise((n,r)=>{var c=i=>{try{s(t.next(i))}catch(u){r(u)}},a=i=>{try{s(t.throw(i))}catch(u){r(u)}},s=i=>i.done?n(i.value):Promise.resolve(i.value).then(c,a);s((t=t.apply(e,o)).next())});import{h as p,E as F}from"./index-FWH8FmVo.js";import{s as E}from"./projectService-Cz5ZqhwS.js";function N(e,o){const t=parseInt(e),n=parseInt(o);if(!t||!n||t>n)return[];const r=[];for(let c=t;c<=n;c++)r.push(c);return r}const A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],D=["Jan-Mar","Apr-Jun","Jul-Sep","Oct-Dec"];function L(e){return e==="monthly"?A:D}const x={"Jan-Mar":["Jan","Feb","Mar"],"Apr-Jun":["Apr","May","Jun"],"Jul-Sep":["Jul","Aug","Sep"],"Oct-Dec":["Oct","Nov","Dec"]},J=p(!1),d=p({year:"",month:"",rows:[{expense:"",amount:0,amountDisplay:"",category:"",costType:""}]});function Y(){d.value.rows.push({expense:"",amount:0,amountDisplay:"",category:"",costType:""})}function k(e){d.value.rows.length>1&&d.value.rows.splice(e,1)}function O(){d.value={year:"",month:"",rows:[{expense:"",amount:0,amountDisplay:"",category:"",costType:""}]}}function P(){O(),J.value=!1}const S=F({url:"frappe.client.insert",makeParams({doctype:e,doc:o}){return{doc:l({doctype:e},o)}}});function R(n){return m(this,arguments,function*({year:e,month:o,expenses:t}){const r=E.value;if(!r)throw new Error("No project selected. Please select a project first.");const c=t.map(s=>l(l({expense_name:s.expense,amount:s.amount},s.category&&{hospitality_category:s.category}),s.costType&&{cost_type:s.costType})),a={year:e,month:o,project:r.project_name,expense_items:c};console.log("Creating expense document with data:",{year:e,month:o,project:r.project_name,expenseItems:c,fullDoc:a});try{const s=yield S.submit({doctype:"Expense Assumptions",doc:a});return console.log("Document created successfully:",s),{success:!0,name:s.name}}catch(s){return console.error("Error creating expense document:",s),console.error("Error details:",{message:s.message,stack:s.stack,response:s.response}),{success:!1,error:s}}})}function I(){return m(this,null,function*(){try{return(yield(yield fetch("/api/v2/method/ex_forcast.api.year.get_year_options")).json()).data.options.filter(n=>n)}catch(e){return console.error("Error loading year options:",e),[]}})}function q(){return m(this,null,function*(){try{const e=E.value;if(!e)return{status:"no_project_selected",message:"No project selected"};const n=(yield(yield fetch(`/api/v2/method/ex_forcast.api.expense_estimate.estimate_display?project=${encodeURIComponent(e.project_name)}`)).json()).data||{};return Object.keys(n).length>0?n:{status:"no_data",message:`No expense data found for project: ${e.project_name}`,project:e.project_name}}catch(e){return console.error("Error loading expense data:",e),{status:"error",message:"Failed to load expense data"}}})}function $(e){const o=new Set;for(const t in e)for(const n in e[t])e[t][n].forEach(r=>o.add(r.expense));return[...o].sort()}const f=p(new Set);function B(e){f.value.has(e)?f.value.delete(e):f.value.add(e)}function G(e){return f.value.has(e)}function U(e,o){const t=new Map;o.forEach(c=>{const a=e[c]||{};for(const s in a)a[s].forEach(i=>{const u=i.hospitality_category||"Other";t.has(u)||t.set(u,new Set),t.get(u).add(i.expense)})});const n=[],r=[];for(const[c,a]of t)c==="Other"?r.push({category:"Other",expenses:[...a].sort()}):n.push({category:c,expenses:[...a].sort()});return n.sort((c,a)=>c.category.localeCompare(a.category)),r.length>0&&n.push(...r),n}function V(e,o,t){for(const n of t){const r=e[n]||{};for(const c in r){const a=r[c].find(s=>s.expense===o);if(a)return{code:a.code||"",costType:a.cost_type||"",hospitalityCategory:a.hospitality_category||""}}}return{code:"",costType:"",hospitalityCategory:""}}function C(e,o,t,n,r="monthly"){var c,a;if(r==="quarterly"&&x[n]){let s=0;for(const i of x[n]){const g=(((c=e==null?void 0:e[t])==null?void 0:c[i])||[]).find(j=>j.expense===o);g&&(s+=parseFloat(g.amount)||0)}return s.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})}else{const i=(((a=e==null?void 0:e[t])==null?void 0:a[n])||[]).find(u=>u.expense===o);return i?parseFloat(i.amount).toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}):"0.00"}}function z(e,o,t,n,r){const c=r(n);let a=0;for(const s of c){const i=C(e,o,t,s,n),u=parseFloat(i.toString().replace(/,/g,""));isNaN(u)||(a+=u)}return a.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})}p(!1);p({});export{C as a,q as b,R as c,N as d,$ as e,U as f,L as g,V as h,G as i,z as j,P as k,I as l,d as m,Y as n,O as o,k as r,J as s,B as t};
